if (!self.define) { let e, s = {}; const a = (a, c) => (a = new URL(a + ".js", c).href, s[a] || new Promise((s => { if ("document" in self) { const e = document.createElement("script"); e.src = a, e.onload = s, document.head.appendChild(e) } else e = a, importScripts(a), s() })).then((() => { let e = s[a]; if (!e) throw new Error(`Module ${a} didn't register its module`); return e }))); self.define = (c, i) => { const t = e || ("document" in self ? document.currentScript.src : "") || location.href; if (s[t]) return; let n = {}; const r = e => a(e, t), d = { module: { uri: t }, exports: n, require: r }; s[t] = Promise.all(c.map((e => d[e] || r(e)))).then((e => (i(...e), n))) } } define(["./workbox-e9849328"], (function (e) {
    "use strict"; importScripts(), self.skipWaiting(), e.clientsClaim(), e.precacheAndRoute([
        // 只保留核心文件
        { url: "/_static/logo.svg", revision: "429dca80df2bb617b2196488ddb1ab4d" },
        { url: "/_static/wr.png", revision: "45189df007a8b89e4914fa9a6c47ccc7" },
        { url: "/_static/wrdo.png", revision: "d6edf9a7e97b6408e5aa3a69f2374f10" },
        { url: "/favicon.ico", revision: "30b96c1ef5b076144f192057b8d73eb3" },
        { url: "/manifest.json", revision: "d0043c2ef1bfeb5c7607bc45368b44ce" },
        { url: "/site.webmanifest", revision: "d0043c2ef1bfeb5c7607bc45368b44ce" }
    ], { ignoreURLParametersMatching: [] }), e.cleanupOutdatedCaches(), e.registerRoute("/", new e.NetworkFirst({ cacheName: "start-url", plugins: [{ cacheWillUpdate: async ({ request: e, response: s, event: a, state: c }) => s && "opaqueredirect" === s.type ? new Response(s.body, { status: 200, statusText: "OK", headers: s.headers }) : s }] }), "GET"), e.registerRoute(/^https:\/\/fonts\.(?:gstatic)\.com\/.*/i, new e.CacheFirst({ cacheName: "google-fonts-webfonts", plugins: [new e.ExpirationPlugin({ maxEntries: 4, maxAgeSeconds: 31536e3 })] }), "GET"), e.registerRoute(/^https:\/\/fonts\.(?:googleapis)\.com\/.*/i, new e.StaleWhileRevalidate({ cacheName: "google-fonts-stylesheets", plugins: [new e.ExpirationPlugin({ maxEntries: 4, maxAgeSeconds: 604800 })] }), "GET"), e.registerRoute(/\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i, new e.StaleWhileRevalidate({ cacheName: "static-font-assets", plugins: [new e.ExpirationPlugin({ maxEntries: 4, maxAgeSeconds: 604800 })] }), "GET"), e.registerRoute(/\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i, new e.StaleWhileRevalidate({ cacheName: "static-image-assets", plugins: [new e.ExpirationPlugin({ maxEntries: 64, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute(/\/_next\/image\?url=.+$/i, new e.StaleWhileRevalidate({ cacheName: "next-image", plugins: [new e.ExpirationPlugin({ maxEntries: 64, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute(/\.(?:mp3|wav|ogg)$/i, new e.CacheFirst({ cacheName: "static-audio-assets", plugins: [new e.RangeRequestsPlugin, new e.ExpirationPlugin({ maxEntries: 32, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute(/\.(?:mp4)$/i, new e.CacheFirst({ cacheName: "static-video-assets", plugins: [new e.RangeRequestsPlugin, new e.ExpirationPlugin({ maxEntries: 32, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute(/\.(?:js)$/i, new e.StaleWhileRevalidate({ cacheName: "static-js-assets", plugins: [new e.ExpirationPlugin({ maxEntries: 32, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute(/\.(?:css|less)$/i, new e.StaleWhileRevalidate({ cacheName: "static-style-assets", plugins: [new e.ExpirationPlugin({ maxEntries: 32, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute(/\/_next\/data\/.+\/.+\.json$/i, new e.StaleWhileRevalidate({ cacheName: "next-data", plugins: [new e.ExpirationPlugin({ maxEntries: 32, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute(/\.(?:json|xml|csv)$/i, new e.NetworkFirst({ cacheName: "static-data-assets", plugins: [new e.ExpirationPlugin({ maxEntries: 32, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute((({ url: e }) => { if (!(self.origin === e.origin)) return !1; const s = e.pathname; return !s.startsWith("/api/auth/") && !!s.startsWith("/api/") }), new e.NetworkFirst({ cacheName: "apis", networkTimeoutSeconds: 10, plugins: [new e.ExpirationPlugin({ maxEntries: 16, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute((({ url: e }) => { if (!(self.origin === e.origin)) return !1; return !e.pathname.startsWith("/api/") }), new e.NetworkFirst({ cacheName: "others", networkTimeoutSeconds: 10, plugins: [new e.ExpirationPlugin({ maxEntries: 32, maxAgeSeconds: 86400 })] }), "GET"), e.registerRoute((({ url: e }) => !(self.origin === e.origin)), new e.NetworkFirst({ cacheName: "cross-origin", networkTimeoutSeconds: 10, plugins: [new e.ExpirationPlugin({ maxEntries: 32, maxAgeSeconds: 3600 })] }), "GET")
}));